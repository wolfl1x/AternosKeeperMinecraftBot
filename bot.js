const mineflayer = require('mineflayer');
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder');
const vec3 = require('vec3');

class MinecraftBot {
    constructor(host, port, username = 'AternosKeeper') {
        this.config = {
            host: host,
            port: port,
            username: username,
            auth: 'offline' // –î–ª—è cracked —Å–µ—Ä–≤–µ—Ä–æ–≤
        };
        
        this.bot = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 10;
        this.chatEnabled = true; // –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞
        
        this.setupEventHandlers();
    }
    
    setupEventHandlers() {
        process.on('SIGINT', () => {
            console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...');
            this.disconnect();
            process.exit(0);
        });
        
        process.on('unhandledRejection', (error) => {
            console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
        });
    }
    
    connect() {
        console.log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ${this.config.host}:${this.config.port}...`);
        
        try {
            this.bot = mineflayer.createBot(this.config);
            this.setupBotEvents();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:', error);
            this.scheduleReconnect();
        }
    }
    
    setupBotEvents() {
        // –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.bot.on('login', () => {
            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!');
            this.isConnected = true;
            this.reconnectAttempts = 0;
        });
        
        // –°–æ–±—ã—Ç–∏–µ —Å–ø–∞–≤–Ω–∞ –≤ –º–∏—Ä–µ
        this.bot.on('spawn', () => {
            console.log('üìç –ë–æ—Ç –∑–∞—Å–ø–∞–≤–Ω–∏–ª—Å—è –≤ –º–∏—Ä–µ');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–≥–∏–Ω pathfinder –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
            this.bot.loadPlugin(pathfinder);
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            this.startActivityCycle();
        });
        
        // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
        this.bot.on('error', (error) => {
            console.error('üí• –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
            this.isConnected = false;
        });
        
        // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        this.bot.on('end', (reason) => {
            console.log(`üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${reason}`);
            this.isConnected = false;
            this.scheduleReconnect();
        });
        
        // –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        this.bot.on('message', (message) => {
            const text = message.toString().trim();
            console.log(`üí¨ –ß–∞—Ç: ${text}`);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã .nomessage
            if (text.toLowerCase().startsWith('.nomessage')) {
                this.handleNoMessageCommand(text);
                return;
            }
            
            // –í–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ
            if (text.toLowerCase().startsWith('.message')) {
                this.handleMessageCommand(text);
                return;
            }
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –≤–∫–ª—é—á–µ–Ω)
            if (this.chatEnabled && text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç') && text.toLowerCase().includes(this.config.username.toLowerCase())) {
                this.sendChatMessage('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω!');
            }
        });
        
        // –°–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏
        this.bot.on('death', () => {
            console.log('üíÄ –ë–æ—Ç —É–º–µ—Ä...');
            setTimeout(() => {
                if (this.bot && this.isConnected) {
                    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è...');
                    this.bot.chat('/spawn');
                }
            }, 3000);
        });
        
        // –°–æ–±—ã—Ç–∏–µ –∫–∏–∫–∞
        this.bot.on('kicked', (reason) => {
            console.log(`üö´ –ë–æ—Ç–∞ –∫–∏–∫–Ω—É–ª–∏: ${reason}`);
            this.scheduleReconnect();
        });
    }
    
    handleNoMessageCommand(text) {
        this.chatEnabled = false;
        console.log('üîá –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        if (this.bot && this.isConnected) {
            this.bot.chat('üîá –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .message —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ.');
        }
    }
    
    handleMessageCommand(text) {
        this.chatEnabled = true;
        console.log('üîä –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –≤–∫–ª—é—á–µ–Ω—ã');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        if (this.bot && this.isConnected) {
            this.bot.chat('üîä –ê–≤—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .nomessage —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.');
        }
    }
    
    startActivityCycle() {
        console.log('üéÆ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
        console.log('üí° –ö–æ–º–∞–Ω–¥—ã: .nomessage - –≤—ã–∫–ª—é—á–∏—Ç—å —á–∞—Ç, .message - –≤–∫–ª—é—á–∏—Ç—å —á–∞—Ç');
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30-60 —Å–µ–∫—É–Ω–¥
        this.activityInterval = setInterval(() => {
            if (!this.isConnected || !this.bot) return;
            
            this.performRandomActivity();
            
        }, 30000 + Math.random() * 30000); // 30-60 —Å–µ–∫—É–Ω–¥
        
        // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –≤–∫–ª—é—á–µ–Ω)
        this.chatInterval = setInterval(() => {
            if (!this.isConnected || !this.bot || !this.chatEnabled) return;
            
            this.sendRandomMessage();
            
        }, 120000 + Math.random() * 180000); // 2-5 –º–∏–Ω—É—Ç
    }
    
    performRandomActivity() {
        if (!this.bot) return;
        
        const activities = [
            () => this.jump(),
            () => this.lookAround(),
            () => this.sneak(),
            () => this.moveRandomly(),
            () => this.switchItem()
        ];
        
        const randomActivity = activities[Math.floor(Math.random() * activities.length)];
        randomActivity();
    }
    
    jump() {
        if (this.bot) {
            this.bot.setControlState('jump', true);
            setTimeout(() => {
                if (this.bot) this.bot.setControlState('jump', false);
            }, 500);
            console.log('ü¶ò –ë–æ—Ç –ø—Ä—ã–≥–Ω—É–ª');
        }
    }
    
    lookAround() {
        if (this.bot) {
            const yaw = Math.random() * Math.PI * 2;
            const pitch = (Math.random() - 0.5) * Math.PI;
            this.bot.look(yaw, pitch, false);
            console.log('üëÄ –ë–æ—Ç –æ—Å–º–æ—Ç—Ä–µ–ª—Å—è');
        }
    }
    
    sneak() {
        if (this.bot) {
            this.bot.setControlState('sneak', true);
            setTimeout(() => {
                if (this.bot) this.bot.setControlState('sneak', false);
            }, 2000);
            console.log('ü¶ù –ë–æ—Ç –ø—Ä–∏—Å–µ–ª');
        }
    }
    
    moveRandomly() {
        if (!this.bot || !this.bot.pathfinder) return;
        
        const directions = ['forward', 'back', 'left', 'right'];
        const direction = directions[Math.floor(Math.random() * directions.length)];
        
        this.bot.setControlState(direction, true);
        setTimeout(() => {
            if (this.bot) {
                directions.forEach(dir => this.bot.setControlState(dir, false));
            }
        }, 1000);
        
        console.log(`üö∂ –ë–æ—Ç –ø–æ—à–µ–ª ${direction}`);
    }
    
    switchItem() {
        if (this.bot && this.bot.inventory) {
            const selectedSlot = Math.floor(Math.random() * 9);
            this.bot.setQuickBarSlot(selectedSlot);
            console.log(`üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å–ª–æ—Ç –Ω–∞ ${selectedSlot}`);
        }
    }
    
    sendRandomMessage() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —á–∞—Ç
        if (!this.chatEnabled) return;
        
        const messages = [
            "–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω! üåü",
            "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º! üëã",
            "–ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞? üòä",
            "–ö—Ä–∞—Å–∏–≤—ã–π —Å–µ—Ä–≤–µ—Ä! üè∞",
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω! ‚ö°",
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è",
            "–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–≥—Ä—ã! üéÆ",
            "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è! ‚õÖ"
        ];
        
        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        this.sendChatMessage(randomMessage);
    }
    
    sendChatMessage(message) {
        // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        if (this.bot && this.isConnected && this.chatEnabled) {
            this.bot.chat(message);
            console.log(`üí¨ –ë–æ—Ç –Ω–∞–ø–∏—Å–∞–ª: ${message}`);
        }
    }
    
    scheduleReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.log('üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }
        
        this.reconnectAttempts++;
        const delay = Math.min(30000 * this.reconnectAttempts, 300000); // –ú–∞–∫—Å 5 –º–∏–Ω—É—Ç
        
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay/1000}—Å–µ–∫...`);
        
        setTimeout(() => {
            this.connect();
        }, delay);
    }
    
    disconnect() {
        console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞...');
        
        if (this.activityInterval) clearInterval(this.activityInterval);
        if (this.chatInterval) clearInterval(this.chatInterval);
        
        if (this.bot) {
            this.bot.quit();
            this.bot = null;
        }
        
        this.isConnected = false;
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_CONFIG = {
    host: 'kloposu.aternos.me', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
    port: 37194, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç
    username: 'AternosKeeper' // –ò–º—è –±–æ—Ç–∞
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ Minecraft –±–æ—Ç–∞ –¥–ª—è Aternos...');
console.log(`üéØ –°–µ—Ä–≤–µ—Ä: ${SERVER_CONFIG.host}:${SERVER_CONFIG.port}`);
console.log(`ü§ñ –ò–º—è –±–æ—Ç–∞: ${SERVER_CONFIG.username}`);
console.log('üí° –ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ: .nomessage - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—á–∞—Ç, .message - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—á–∞—Ç');
console.log('‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');

const bot = new MinecraftBot(SERVER_CONFIG.host, SERVER_CONFIG.port, SERVER_CONFIG.username);
bot.connect();